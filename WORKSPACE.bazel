workspace( name = "ocaml-uri" )

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

git_repository(
    name = "sunlark",
    remote = "https://github.com/obazl/sunlark",
    branch = "dev",
)
load("@sunlark//:WORKSPACE.bzl", "cc_fetch_repos")
## cc_fetch_repos() fetches rules_foreign_cc, needed by sealark
cc_fetch_repos()

load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")

rules_foreign_cc_dependencies(
    # register_built_tools=False
)

################
git_repository(
    name = "camlark",
    remote = "https://github.com/obazl/ocamlark",
    branch = "dev",
)
load("@camlark//:WORKSPACE.bzl", obazl_deps_bootstrap="cc_fetch_repos")
obazl_deps_bootstrap()

# #############
# http_archive(
#     name = "bazel_skylib",
#     urls = [
#         "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.0.2/bazel-skylib-1.0.2.tar.gz",
#         "https://github.com/bazelbuild/bazel-skylib/releases/download/1.0.2/bazel-skylib-1.0.2.tar.gz",
#     ],
#     sha256 = "97e70364e9249702246c0e9444bccdc4b847bed1eb03c5a3ece4f83dfe6abc44",
# )
# load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")
# bazel_skylib_workspace()

# all_content = """filegroup(name = "all", srcs = glob(["**"]), visibility = ["//visibility:public"])"""

# ######################################
# ###############  OBazl ###############
git_repository(
    name = "rules_ocaml",
    remote = "https://github.com/obazl/rules_ocaml",
    branch = "obazl3",
)

git_repository(
    name = "obazl_tools_obazl",
    remote = "https://github.com/obazl/tools_obazl",
    branch = "dev",
)
load("@obazl_tools_obazl//:WORKSPACE.bzl", obazl_fetch_repos="cc_fetch_repos")
obazl_fetch_repos()

git_repository(
    name = "opam",  ## do not change name
    remote = "https://github.com/obazl/tools_opam",
    branch = "obazl2",
)
load("@opam//:WORKSPACE.bzl", "opam_fetch_repos")
opam_fetch_repos()

load("@rules_foreign_cc//foreign_cc:repositories.bzl",
     "rules_foreign_cc_dependencies")
rules_foreign_cc_dependencies()

#### uncomment after configuring coswitch; see README.md
load("//:COSWITCH.bzl", register_coswitch = "register")
register_coswitch()

load("@coswitch//:BOOTSTRAP.bzl", "bootstrap")
bootstrap()

